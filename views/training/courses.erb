<%
  courseses = @events.map do |course|
    date = defined?(course.date) ? format_date_range(course.date, course.finish_date, 'es') : t('home2022.home_courses.no_date')
    is_open = defined?(course.date)
    is_incompany = true
    {
      title: course.event_type.name, duration: course.event_type.duration, subtitle: course.event_type.subtitle,
      cover: course.event_type.cover, uri_path: 'course.event_type.uri_path', open: false, date: date, url: 'course.event_type.uri_path',
      categories: course.event_type.categories, is_open: is_open, is_incompany: is_incompany, is_elearning: false,
      country: 'OL', certified: (2 if course.event_type.is_sa_cert).to_i +
      (1 if course.event_type.is_kleer_cert).to_i,
    }
  end

  # puts courseses

  #solucion completamente temporal
  courses = []
  categories = []
  @categories.each{|e|
    categories.push(e.name)
    e.event_types.each{|course|
      date = defined?(course.date) ? format_date_range(course.date, course.finish_date, 'es') : t('home2022.home_courses.no_date')
      is_open = defined?(course.date)
      is_incompany = true
      courses.push(
      {
        title: course.name, duration: course.duration, subtitle: course.subtitle,
        cover: course.cover, uri_path: course.uri_path, is_open: is_open, is_incompany: is_incompany, is_elearning: false,
        category: e.name, date: date, url: course.uri_path,
        country: 'OL', certified: (2 if course.is_sa_cert).to_i +
        (1 if course.is_kleer_cert).to_i,
      })
    }
  }

  @academy.each{|e|
    courses.push(
      {
        title: e['es']['title'], duration: e['es']['duration'], subtitle: e['es']['subtitle'],
        cover: e['es']['cover'], uri_path: e['es']['url'], is_open: false, is_incompany: false, is_elearning: true,
        category: e['es']['category'], date: 'Asincrono', certified: 1
      }
    )
  }

%>

<section id="courses" class="p-5 mt-4">
  <div class='container'>
    <h4 class="text-center m-4 last-courses__tittle">
      Capacitaci√≥n personal y empresarial en agilidad
    </h4>
    <div class="courses-filters">
      <div class="dropdown d-flex courses-filters__drop">
        <button class="btn btn-secondary dropdown-toggle " type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
          Tipo de evento
        </button>
        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
          <li>
            <div class="form-check">
              <input
                class="form-check-input check-delivery"
                type="checkbox"
                value="Abiertos"
                onchange="handleChangeDelivery(this.value)"
                checked="true"
                id="abiertosCheck">
              <label class="form-check-label " for="abiertosCheck">Abiertos</label>
            </div>
          </li>
          <li>
            <div class="form-check">
              <input
                class="form-check-input check-delivery"
                type="checkbox"
                value="In Company"
                onchange="handleChangeDelivery(this.value)"
                checked="true"
                id="incompanyCheck">
              <label class="form-check-label" for="incompanyCheck">In Company</label>
            </div>
          </li>
          <li>
            <div class="form-check">
              <input
                class="form-check-input check-delivery"
                type="checkbox"
                value="E-learning"
                checked="true"
                onchange="handleChangeDelivery(this.value)"
                id="elearningCheck">
              <label class="form-check-label" for="elearningCheck">E-learning</label>
            </div>
          </li>
        </ul>
      </div>
      <% categories.each do |category| %>
        <button
          class="courses-filters__tag courses-filters__tag--selected"
          onclick="handleClickCategory('<%= category %>')"
        ><%= category %></button>
      <% end %>

    </div>
    <div class='row mt-5 w-100' id="courses-container">
      <% courses.each do |course|
        @course = course
      %>
        <div class="col-10 col-sm-6 col-md-4 col-lg-3 p-2" id="<%= "#{course[:category]}--#{course[:title]}"%>">
          <%= erb :'component/_course_card' %>
        </div>
      <% end%>
    </div>
    <div class="btn-center-container mt-5">
      <button
        class="my-primary-button"
        id="see-more"
        onclick="handleClickSeeMore()"
      >Ver mas</button>
    </div>
  </div>
</section>

<script>

  let showFirst = 8
  const container = document.getElementById('courses-container')
  const categoryButtons = Array.from(document.getElementsByClassName('courses-filters__tag'))
  const deliveryChecks = Array.from(document.getElementsByClassName('check-delivery'))
  const seeMoreButton = document.getElementById("see-more")

  let deliveryFilters = deliveryChecks.map(element => element.labels[0].outerText)
  let categoryFilters = categoryButtons.map(element => element.outerText)

  const getCourseCategories = (element) => {
      const divs = element.children[0].children[0].children[1].children;
      return Array.from(divs).map(div => div.outerText)
  }

  const courses = Array.from(container.children).map((element) => {
      let idSplitted = element.id.split('--')
      const name = idSplitted.pop()

      return {
          card: element,
          categories: idSplitted,
          deliveryOptions: getCourseCategories(element),
          name: name
      }
  })


  const compareCourse = (course) => {
    const deliveryCheck = deliveryFilters.some(item => course.deliveryOptions.includes(item))
    const categoryCheck = categoryFilters.some(item => course.categories.includes(item))
    return deliveryCheck && categoryCheck
  }

  const visualFilters = () => {
      let counter = 1
      courses.forEach((course, index) => {
          console.log(`${index} ${course.name}`)
        if(compareCourse(course) && counter <= showFirst){
            console.log('se muestra')
            counter++
            course.card.classList.remove('hidden-element')
        }else{
            course.card.classList.add('hidden-element')
        }
      })

      if(showFirst >= courses.length){
          seeMoreButton.classList.add('hidden-element')
      }

      categoryButtons.forEach(button => {
          if(categoryFilters.includes(button.outerText)){
              button.classList.add('courses-filters__tag--selected')
              button.classList.remove('courses-filters__tag--unselected')
          }else{
              button.classList.remove('courses-filters__tag--selected')
              button.classList.add('courses-filters__tag--unselected')
          }
      })

  }

  const handleClickCategory = (category) => {
      if(categoryFilters.includes(category)){
          categoryFilters = categoryFilters.filter(item => item !== category)
      }else{
          categoryFilters.push(category)
      }
      visualFilters()
  }

  const handleChangeDelivery = (type) => {
    if(deliveryFilters.includes(type)){
        deliveryFilters = deliveryFilters.filter(item => item !== type)
    }else{
        deliveryFilters.push(type)
    }

    visualFilters()
  }

  const handleClickSeeMore = () => {
      showFirst += 8
      visualFilters()
  }

  visualFilters()
</script>

<%
  courses = keventer_to_card @events

  @academy.each{|e|
    courses.push(
      {
        title: e['es']['title'], duration: e['es']['duration'], subtitle: e['es']['subtitle'],
        cover: e['es']['cover'], uri_path: e['es']['url'], is_open: false, is_incompany: false, is_elearning: true,
        has_webp: false, url: e['es']['url'],
        categories: format_categories(e['es']['categories']), date: 'Asincrono', certified: 1
      }
    )
  }

  categories = []
  @categories.each{|e|
    categories.push(e.name)
  }

  courses = courses.uniq {|e| e[:uri_path]}

%>

<section id="training-courses" class="p-5 mt-4">
  <div class='container training-courses__container'>
    <h4 class="text-center m-4 last-courses__tittle">
      <%= t("courses_page.catalog.title") %>
    </h4>
    <div class="courses-filters row">
      <div class="dropdown d-flex courses-filters__drop col-12 col-lg-3">
        <button class="btn btn-secondary dropdown-toggle " type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
          Modalidad
        </button>
        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
          <li>
            <div class="form-check">
              <input
                class="form-check-input check-delivery"
                type="checkbox"
                value="Abierto"
                onchange="handleChangeDelivery(this.value)"
                checked="true"
                id="abiertosCheck">
              <label class="form-check-label " for="abiertosCheck">Abierto</label>
            </div>
          </li>
          <li>
            <div class="form-check">
              <input
                class="form-check-input check-delivery"
                type="checkbox"
                value="In Company"
                onchange="handleChangeDelivery(this.value)"
                checked="true"
                id="incompanyCheck">
              <label class="form-check-label" for="incompanyCheck">In Company</label>
            </div>
          </li>
          <li>
            <div class="form-check">
              <input
                class="form-check-input check-delivery"
                type="checkbox"
                value="E-learning"
                checked="true"
                onchange="handleChangeDelivery(this.value)"
                id="elearningCheck">
              <label class="form-check-label" for="elearningCheck">E-learning</label>
            </div>
          </li>
        </ul>
      </div>
      <div class="buttons-container col-12 col-lg-9">
        <div class="courses-filters-container d-flex">
          <% categories.each do |category| %>
            <button
              class="courses-filters__tag courses-filters__tag--selected"
              onclick="handleClickCategory('<%= category %>')"
            ><%= category %></button>
          <% end %>
        </div>
      </div>



    </div>
    <div class='row mt-5 w-100' id="courses-container">
      <% courses.each do |course|
        @course = course
      %>
        <div class="col-12 col-sm-6 col-md-4 col-lg-3 p-2" id="<%= "#{course[:categories]}#{course[:title]}"%>">
          <%= erb :'component/_course_card' %>
        </div>
      <% end%>

    </div>
    <div class="btn-center-container mt-5">
      <button
        class="my-primary-button"
        id="see-more"
        onclick="handleClickSeeMore()"
      ><%= t("courses_page.catalog.more") %></button>
    </div>

    <img src="/app/img/view_figures/red_circle3.svg" class="desktop_figure training-courses_red-circle" />
    <img src="/app/img/view_figures/green_triangle.svg" class="desktop_figure training-courses_green-triangle" />
    <img src="/app/img/view_figures/rustic_sigsac.svg" class="desktop_figure training-courses_rustic-sigsac" />
  </div>

</section>

<script>

  let showFirst = 8
  const container = document.getElementById('courses-container')
  const categoryButtons = Array.from(document.getElementsByClassName('courses-filters__tag'))
  const deliveryChecks = Array.from(document.getElementsByClassName('check-delivery'))
  const seeMoreButton = document.getElementById("see-more")

  let deliveryFilters = deliveryChecks.map(element => element.labels[0].outerText)
  let categoryFilters = categoryButtons.map(element => element.outerText)

  const getCourseCategory = (element) => {
      const divs = element.children[0].children[0].children[1].children;
      return Array.from(divs).map(div => div.outerText)
  }

  const courses = Array.from(container.children).map((element) => {
      let idSplitted = element.id.split('--')
      const name = idSplitted.pop()

      return {
          card: element,
          categories: idSplitted,
          deliveryOptions: getCourseCategory(element),
          name: name
      }
  })


  const compareCourse = (course) => {

    const deliveryCheck = deliveryFilters.some(item => {
        // console.log(`${item} - ${course.deliveryOption}`)
        return course.deliveryOptions.includes(item)
    })
    const categoryCheck = categoryFilters.some(item => course.categories.includes(item))
    return deliveryCheck && categoryCheck
  }

  const visualFilters = () => {
      let counter = 1
      courses.forEach((course, index) => {
        if(compareCourse(course) && counter <= showFirst){
            counter++
            console.log(counter)
            course.card.classList.remove('hidden-element')
        }else{
            course.card.classList.add('hidden-element')
        }
      })

      if(showFirst >= courses.length){
          seeMoreButton.classList.add('hidden-element')
      }

      categoryButtons.forEach(button => {
          if(categoryFilters.includes(button.outerText)){
              button.classList.add('courses-filters__tag--selected')
              button.classList.remove('courses-filters__tag--unselected')
          }else{
              button.classList.remove('courses-filters__tag--selected')
              button.classList.add('courses-filters__tag--unselected')
          }
      })

  }

  const handleClickCategory = (category) => {
      if(categoryFilters.includes(category)){
          categoryFilters = categoryFilters.filter(item => item !== category)
      }else{
          categoryFilters.push(category)
      }
      visualFilters()
  }

  const handleChangeDelivery = (type) => {
    if(deliveryFilters.includes(type)){
        deliveryFilters = deliveryFilters.filter(item => item !== type)
    }else{
        deliveryFilters.push(type)
    }
    visualFilters()
  }

  const handleClickSeeMore = () => {
      showFirst += 8
      visualFilters()
  }

  visualFilters()
</script>

<!-- Include noUiSlider CSS and JS via CDN with corrected integrity values -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.7.1/nouislider.min.css" integrity="sha512-qveKnGrvOChbSzAdtSs8p69eoLegyh+1hwOMbmpCViIwj7rn4oJjdmMvWOuyQlTOZgTlZA0N2PXA7iA8/2TUYA==" crossorigin="anonymous" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.7.1/nouislider.min.js" integrity="sha512-UOJe4paV6hYWBnS0c9GnIRH8PLm2nFK22uhfAvsTIqd3uwnWsVri1OPn5fJYdLtGY3wB11LGHJ4yPU1WFJeBYQ==" crossorigin="anonymous"></script>

<section id="assessment-hero" class="assessment-hero">
  <div class="resource-detail-hero">
    <div class="container offset-lg-1">
      <div class="row">
        <div class="col-12 col-lg-6 resource-detail-hero__content">
          <h1><%= @assessment.title %></h1>
          <p><%= @markdown_renderer.render(@assessment.description) %></p>
        </div>
        <div class="col-12 col-lg-5 resource-detail-hero__image d-none d-lg-block">
          <img
            src="https://kleer-images.s3.sa-east-1.amazonaws.com/website-assets/green_bean.svg"
            class="resource-detail-hero__decoration resource-detail-hero__decoration--green"
            alt="decorative figure"
          />
        </div>
      </div>
    </div>
  </div>
</section>

<section id="assessment-details" class="container resource-detail-body">
  <div class="container mt-5 mb-5">
    <form id="assessmentForm" action="/<%= session[:locale] || 'es' %>/submit_assessment" method="post" class="needs-validation" novalidate>
      <input type="hidden" name="assessment_id" value="<%= @assessment.id %>">

       <!-- Question Groups -->
      <% @assessment.question_groups.each do |group| %>
        <div class="question-group-container">
          <h3 class="question-group-title"><%= group.name %></h3>
          <% if !group.description.nil? && !group.description.to_s.empty? %>
            <div class="question-group-description"><%= @markdown_renderer.render(group.description) %></div>
          <% end %>
          
          <% group.questions.each do |question| %>
            <div class="question-container">
              <label class="question-label"><%= question.name %></label>
              <% if !question.description.nil? && !question.description.to_s.empty? %>
                <div class="question-description"><%= @markdown_renderer.render(question.description) %></div>
              <% end %>
              
              <% case question.question_type 
                  when 'linear_scale' %>
                <div class="slider-container">
                  <div class="slider-wrapper">
                    <div id="slider-<%= question.id %>"></div>
                  </div>
                  <div class="slider-labels">
                    <% question.answers.each do |answer| %>
                      <div class="slider-label" data-value="<%= answer.id %>"><%= @markdown_renderer.render(answer.text) %></div>
                    <% end %>
                  </div>
                </div>
                <input type="hidden" id="slider-value-<%= question.id %>" name="responses[<%= question.id %>]" required>
                
              <% when 'radio_button' %>
                <div class="radio-group">
                  <% question.answers.each do |answer| %>
                    <label class="radio-option">
                      <input type="radio" name="responses[<%= question.id %>]" value="<%= answer.id %>" required>
                      <span><%= @markdown_renderer.render(answer.text) %></span>
                    </label>
                  <% end %>
                </div>
                
              <% when 'short_text' %>
                <input type="text" 
                       class="text-input" 
                       name="responses[<%= question.id %>]" 
                       placeholder="<%= t('assessment.short_text_placeholder', default: 'Escribe tu respuesta aquí...') %>"
                       required>
                       
              <% when 'long_text' %>
                <textarea class="textarea-input" 
                          name="responses[<%= question.id %>]" 
                          placeholder="<%= t('assessment.long_text_placeholder', default: 'Escribe tu respuesta detallada aquí...') %>"
                          required></textarea>
              <% end %>
              
              <div class="invalid-feedback"><%= t("assessment.required_answer", default: "Por favor, selecciona una respuesta.") %></div>
            </div>
          <% end %>
        </div>
      <% end %>

       <!-- Standalone Questions with Different Types -->
      <% @assessment.questions.each do |question| %>
        <div class="question-container">
          <label class="question-label"><%= question.name %></label>
          <% if !question.description.nil? && !question.description.to_s.empty? %>
            <div class="question-description"><%= @markdown_renderer.render(question.description) %></div>
          <% end %>
          
          <% case question.question_type 
               when 'linear_scale' %>
            <div class="slider-container">
              <div class="slider-wrapper">
                <div id="slider-<%= question.id %>"></div>
              </div>
              <div class="slider-labels">
                <% question.answers.each do |answer| %>
                  <div class="slider-label" data-value="<%= answer.id %>"><%= @markdown_renderer.render(answer.text) %></div>
                <% end %>
              </div>
            </div>
            <input type="hidden" id="slider-value-<%= question.id %>" name="responses[<%= question.id %>]" required>
            
          <% when 'radio_button' %>
            <div class="radio-group">
              <% question.answers.each do |answer| %>
                <label class="radio-option">
                  <input type="radio" name="responses[<%= question.id %>]" value="<%= answer.id %>" required>
                  <span><%= @markdown_renderer.render(answer.text) %></span>
                </label>
              <% end %>
            </div>
            
          <% when 'short_text' %>
            <input type="text" 
                   class="text-input" 
                   name="responses[<%= question.id %>]" 
                   placeholder="<%= t('assessment.short_text_placeholder', default: 'Escribe tu respuesta aquí...') %>"
                   required>
                   
          <% when 'long_text' %>
            <textarea class="textarea-input" 
                      name="responses[<%= question.id %>]" 
                      placeholder="<%= t('assessment.long_text_placeholder', default: 'Escribe tu respuesta detallada aquí...') %>"
                      required></textarea>
          <% end %>
          
          <div class="invalid-feedback"><%= t("assessment.required_answer", default: "Por favor, selecciona una respuesta.") %></div>
        </div>
      <% end %>

      <div class="text-center mt-4">
        <button type="submit" class="btn my-primary-button">
          <%= t("assessment.submit", default: "Enviar") %>
        </button>
      </div>
    </form>
  </div>
</section>

<script>
  (function () {
    'use strict';
    const form = document.getElementById('assessmentForm');
    if (form) {
      form.addEventListener('submit', function (event) {
        if (!form.checkValidity()) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    }
  })();

<%  
   # Collect all linear_scale questions from both groups and standalone
   all_linear_questions = []
   all_linear_questions += @assessment.question_groups.flat_map { |group| group.questions.select { |q| q.question_type == 'linear_scale' } }
   all_linear_questions += @assessment.questions.select { |q| q.question_type == 'linear_scale' }
   
   all_linear_questions.each do |question| 
%>
    document.addEventListener('DOMContentLoaded', function () {
      const slider = document.getElementById('slider-<%= question.id %>');
      const hiddenInput = document.getElementById('slider-value-<%= question.id %>');
      const labels = document.querySelectorAll('.slider-label[data-value]');
      const answers_count = <%= question.answers.count %>;

      if (slider) {
        noUiSlider.create(slider, {
          start: answers_count/2, 
          orientation: 'vertical',
          direction: 'ltr',
          range: {
            'min': [1],
            'max': [answers_count]
          },
          // Make sure values are inverted so 1=Low at bottom, 3=High at top
          transform: {
            to: function (value) {
              return answers_count - value + 1; // Transform: 1→3, 2→2, 3→1
            },
            from: function (value) {
              return answers_count - value + 1; // Transform back: 3→1, 2→2, 1→3
            }
          },
          step: 1,
          connect: 'upper' // Changed from 'lower' to 'upper' to fill from bottom up
        });

       slider.noUiSlider.on('update', function (values, handle) {
          const rawValue = Math.round(values[handle]);
          // Transform the raw value to match our labels
          const value = answers_count - rawValue + 1;

          hiddenInput.value = value;

          // Highlight active label
          highlightLabel(value);
        });

        // Get labels specific to this question's container
        const questionContainer = slider.closest('.question-container');
        const questionLabels = questionContainer.querySelectorAll('.slider-label[data-value]');
        
        questionLabels.forEach(label => {
          label.addEventListener('click', function () {
            const value = parseInt(this.getAttribute('data-value'));
            // Transform the value before setting
            slider.noUiSlider.set(answers_count - value + 1);
          });
        });

        // Initial highlight function specific to this question
        function highlightLabel(value) {
          questionLabels.forEach(label => {
            label.classList.remove('active');
          });
          const activeLabel = questionContainer.querySelector(`.slider-label[data-value="${value}"]`);
          if (activeLabel) {
            activeLabel.classList.add('active');
          }
        }

        // Initial highlight
        highlightLabel(Math.ceil(answers_count/2)); // Medium
      }
    });
<% end %>

  </script>